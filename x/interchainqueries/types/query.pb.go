// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchainqueries/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryRegisteredKVQueriesRequest struct {
}

func (m *QueryRegisteredKVQueriesRequest) Reset()         { *m = QueryRegisteredKVQueriesRequest{} }
func (m *QueryRegisteredKVQueriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredKVQueriesRequest) ProtoMessage()    {}
func (*QueryRegisteredKVQueriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{2}
}
func (m *QueryRegisteredKVQueriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredKVQueriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredKVQueriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredKVQueriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredKVQueriesRequest.Merge(m, src)
}
func (m *QueryRegisteredKVQueriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredKVQueriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredKVQueriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredKVQueriesRequest proto.InternalMessageInfo

type QueryRegisteredKVQueriesResponse struct {
	RegisteredQueries []RegisteredKVQuery `protobuf:"bytes,1,rep,name=registered_queries,json=registeredQueries,proto3" json:"registered_queries"`
}

func (m *QueryRegisteredKVQueriesResponse) Reset()         { *m = QueryRegisteredKVQueriesResponse{} }
func (m *QueryRegisteredKVQueriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredKVQueriesResponse) ProtoMessage()    {}
func (*QueryRegisteredKVQueriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{3}
}
func (m *QueryRegisteredKVQueriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredKVQueriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredKVQueriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredKVQueriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredKVQueriesResponse.Merge(m, src)
}
func (m *QueryRegisteredKVQueriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredKVQueriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredKVQueriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredKVQueriesResponse proto.InternalMessageInfo

func (m *QueryRegisteredKVQueriesResponse) GetRegisteredQueries() []RegisteredKVQuery {
	if m != nil {
		return m.RegisteredQueries
	}
	return nil
}

type QueryRegisteredTXQueriesRequest struct {
}

func (m *QueryRegisteredTXQueriesRequest) Reset()         { *m = QueryRegisteredTXQueriesRequest{} }
func (m *QueryRegisteredTXQueriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredTXQueriesRequest) ProtoMessage()    {}
func (*QueryRegisteredTXQueriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{4}
}
func (m *QueryRegisteredTXQueriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredTXQueriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredTXQueriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredTXQueriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredTXQueriesRequest.Merge(m, src)
}
func (m *QueryRegisteredTXQueriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredTXQueriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredTXQueriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredTXQueriesRequest proto.InternalMessageInfo

type QueryRegisteredTXQueriesResponse struct {
	RegisteredQueries []RegisteredTXQuery `protobuf:"bytes,1,rep,name=registered_queries,json=registeredQueries,proto3" json:"registered_queries"`
}

func (m *QueryRegisteredTXQueriesResponse) Reset()         { *m = QueryRegisteredTXQueriesResponse{} }
func (m *QueryRegisteredTXQueriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredTXQueriesResponse) ProtoMessage()    {}
func (*QueryRegisteredTXQueriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{5}
}
func (m *QueryRegisteredTXQueriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredTXQueriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredTXQueriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredTXQueriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredTXQueriesResponse.Merge(m, src)
}
func (m *QueryRegisteredTXQueriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredTXQueriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredTXQueriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredTXQueriesResponse proto.InternalMessageInfo

func (m *QueryRegisteredTXQueriesResponse) GetRegisteredQueries() []RegisteredTXQuery {
	if m != nil {
		return m.RegisteredQueries
	}
	return nil
}

type QueryRegisteredKVQueryRequest struct {
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryRegisteredKVQueryRequest) Reset()         { *m = QueryRegisteredKVQueryRequest{} }
func (m *QueryRegisteredKVQueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredKVQueryRequest) ProtoMessage()    {}
func (*QueryRegisteredKVQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{6}
}
func (m *QueryRegisteredKVQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredKVQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredKVQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredKVQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredKVQueryRequest.Merge(m, src)
}
func (m *QueryRegisteredKVQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredKVQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredKVQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredKVQueryRequest proto.InternalMessageInfo

func (m *QueryRegisteredKVQueryRequest) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

type QueryRegisteredKVQueryResponse struct {
	RegisteredQuery *RegisteredKVQuery `protobuf:"bytes,1,opt,name=registered_query,json=registeredQuery,proto3" json:"registered_query,omitempty"`
}

func (m *QueryRegisteredKVQueryResponse) Reset()         { *m = QueryRegisteredKVQueryResponse{} }
func (m *QueryRegisteredKVQueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredKVQueryResponse) ProtoMessage()    {}
func (*QueryRegisteredKVQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{7}
}
func (m *QueryRegisteredKVQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredKVQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredKVQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredKVQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredKVQueryResponse.Merge(m, src)
}
func (m *QueryRegisteredKVQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredKVQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredKVQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredKVQueryResponse proto.InternalMessageInfo

func (m *QueryRegisteredKVQueryResponse) GetRegisteredQuery() *RegisteredKVQuery {
	if m != nil {
		return m.RegisteredQuery
	}
	return nil
}

type QueryRegisteredTXQueryRequest struct {
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryRegisteredTXQueryRequest) Reset()         { *m = QueryRegisteredTXQueryRequest{} }
func (m *QueryRegisteredTXQueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredTXQueryRequest) ProtoMessage()    {}
func (*QueryRegisteredTXQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{8}
}
func (m *QueryRegisteredTXQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredTXQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredTXQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredTXQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredTXQueryRequest.Merge(m, src)
}
func (m *QueryRegisteredTXQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredTXQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredTXQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredTXQueryRequest proto.InternalMessageInfo

func (m *QueryRegisteredTXQueryRequest) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

type QueryRegisteredTXQueryResponse struct {
	RegisteredQuery *RegisteredTXQuery `protobuf:"bytes,1,opt,name=registered_query,json=registeredQuery,proto3" json:"registered_query,omitempty"`
}

func (m *QueryRegisteredTXQueryResponse) Reset()         { *m = QueryRegisteredTXQueryResponse{} }
func (m *QueryRegisteredTXQueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredTXQueryResponse) ProtoMessage()    {}
func (*QueryRegisteredTXQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{9}
}
func (m *QueryRegisteredTXQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredTXQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredTXQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredTXQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredTXQueryResponse.Merge(m, src)
}
func (m *QueryRegisteredTXQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredTXQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredTXQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredTXQueryResponse proto.InternalMessageInfo

func (m *QueryRegisteredTXQueryResponse) GetRegisteredQuery() *RegisteredTXQuery {
	if m != nil {
		return m.RegisteredQuery
	}
	return nil
}

type QueryRegisteredKVQueryResultRequest struct {
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryRegisteredKVQueryResultRequest) Reset()         { *m = QueryRegisteredKVQueryResultRequest{} }
func (m *QueryRegisteredKVQueryResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredKVQueryResultRequest) ProtoMessage()    {}
func (*QueryRegisteredKVQueryResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{10}
}
func (m *QueryRegisteredKVQueryResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredKVQueryResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredKVQueryResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredKVQueryResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredKVQueryResultRequest.Merge(m, src)
}
func (m *QueryRegisteredKVQueryResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredKVQueryResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredKVQueryResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredKVQueryResultRequest proto.InternalMessageInfo

func (m *QueryRegisteredKVQueryResultRequest) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

type QueryRegisteredKVQueryResultResponse struct {
	Result *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryRegisteredKVQueryResultResponse) Reset()         { *m = QueryRegisteredKVQueryResultResponse{} }
func (m *QueryRegisteredKVQueryResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredKVQueryResultResponse) ProtoMessage()    {}
func (*QueryRegisteredKVQueryResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{11}
}
func (m *QueryRegisteredKVQueryResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredKVQueryResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredKVQueryResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredKVQueryResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredKVQueryResultResponse.Merge(m, src)
}
func (m *QueryRegisteredKVQueryResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredKVQueryResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredKVQueryResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredKVQueryResultResponse proto.InternalMessageInfo

func (m *QueryRegisteredKVQueryResultResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type Transaction struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb803bedd4e52c75, []int{12}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "neutron.interchainadapter.interchainqueries.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "neutron.interchainadapter.interchainqueries.QueryParamsResponse")
	proto.RegisterType((*QueryRegisteredKVQueriesRequest)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredKVQueriesRequest")
	proto.RegisterType((*QueryRegisteredKVQueriesResponse)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredKVQueriesResponse")
	proto.RegisterType((*QueryRegisteredTXQueriesRequest)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredTXQueriesRequest")
	proto.RegisterType((*QueryRegisteredTXQueriesResponse)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredTXQueriesResponse")
	proto.RegisterType((*QueryRegisteredKVQueryRequest)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredKVQueryRequest")
	proto.RegisterType((*QueryRegisteredKVQueryResponse)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredKVQueryResponse")
	proto.RegisterType((*QueryRegisteredTXQueryRequest)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredTXQueryRequest")
	proto.RegisterType((*QueryRegisteredTXQueryResponse)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredTXQueryResponse")
	proto.RegisterType((*QueryRegisteredKVQueryResultRequest)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredKVQueryResultRequest")
	proto.RegisterType((*QueryRegisteredKVQueryResultResponse)(nil), "neutron.interchainadapter.interchainqueries.QueryRegisteredKVQueryResultResponse")
	proto.RegisterType((*Transaction)(nil), "neutron.interchainadapter.interchainqueries.Transaction")
}

func init() { proto.RegisterFile("interchainqueries/query.proto", fileDescriptor_eb803bedd4e52c75) }

var fileDescriptor_eb803bedd4e52c75 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xbf, 0x6f, 0xd3, 0x4e,
	0x1c, 0xcd, 0xa5, 0xfd, 0xe6, 0x8b, 0x2e, 0xfc, 0xea, 0xb5, 0x42, 0xc1, 0xa2, 0x6e, 0x08, 0x0c,
	0x15, 0x08, 0x5b, 0x6d, 0x85, 0x54, 0x01, 0x2a, 0x55, 0xd4, 0x81, 0xb6, 0x20, 0x35, 0x56, 0x85,
	0x10, 0x4b, 0x75, 0x89, 0x4f, 0xce, 0xa9, 0xad, 0xcf, 0xf5, 0x5d, 0xaa, 0x78, 0x65, 0x65, 0x41,
	0x62, 0xe0, 0x0f, 0x62, 0xe9, 0x58, 0x89, 0x85, 0x09, 0xa1, 0x96, 0xbf, 0x81, 0x81, 0x01, 0xa1,
	0x9c, 0xcf, 0x6e, 0x63, 0x27, 0x05, 0xc7, 0xe9, 0x14, 0xdb, 0xf7, 0xb9, 0xf7, 0x79, 0xef, 0x7d,
	0xec, 0x77, 0x81, 0xb3, 0xd4, 0x15, 0xc4, 0x6f, 0xb5, 0x31, 0x75, 0x0f, 0x3a, 0xc4, 0xa7, 0x84,
	0x9b, 0xbd, 0xdf, 0xc0, 0xf0, 0x7c, 0x26, 0x18, 0x7a, 0xe8, 0x92, 0x8e, 0xf0, 0x99, 0x6b, 0x9c,
	0x95, 0x61, 0x1b, 0x7b, 0x82, 0xf8, 0x46, 0x6a, 0xa3, 0x36, 0xe3, 0x30, 0x87, 0xc9, 0x7d, 0x66,
	0xef, 0x2a, 0x84, 0xd0, 0xee, 0x38, 0x8c, 0x39, 0x7b, 0xc4, 0xc4, 0x1e, 0x35, 0xb1, 0xeb, 0x32,
	0x81, 0x05, 0x65, 0x2e, 0x57, 0xab, 0x0f, 0x5a, 0x8c, 0xef, 0x33, 0x6e, 0x36, 0x31, 0x27, 0x61,
	0x67, 0xf3, 0x70, 0xa1, 0x49, 0x04, 0x5e, 0x30, 0x3d, 0xec, 0x50, 0x57, 0x16, 0xab, 0x5a, 0x3d,
	0xcd, 0xd5, 0xc3, 0x3e, 0xde, 0x8f, 0xb0, 0xe6, 0xd2, 0xeb, 0x0e, 0x71, 0x09, 0xa7, 0x51, 0x81,
	0x96, 0x2e, 0x10, 0xdd, 0x70, 0xad, 0x36, 0x03, 0x51, 0xa3, 0xd7, 0x7e, 0x4b, 0x22, 0x5a, 0xe4,
	0xa0, 0x43, 0xb8, 0xa8, 0xb5, 0xe1, 0x74, 0xdf, 0x53, 0xee, 0x31, 0x97, 0x13, 0xd4, 0x80, 0xa5,
	0xb0, 0x73, 0x05, 0x54, 0xc1, 0x7c, 0x79, 0x71, 0xc9, 0xc8, 0xe0, 0x93, 0x11, 0x82, 0xd5, 0x27,
	0x8f, 0xbe, 0xcd, 0x15, 0x2c, 0x05, 0x54, 0xbb, 0x0b, 0xe7, 0x64, 0x27, 0x8b, 0x38, 0x94, 0x0b,
	0xe2, 0x13, 0x7b, 0xf3, 0x75, 0x23, 0xdc, 0x10, 0x91, 0xf9, 0x04, 0x60, 0x75, 0x78, 0x8d, 0xa2,
	0xc6, 0x21, 0xf2, 0xe3, 0xe5, 0x1d, 0xd5, 0xb2, 0x02, 0xaa, 0x13, 0xf3, 0xe5, 0xc5, 0x95, 0x4c,
	0x34, 0x93, 0x5d, 0x02, 0xc5, 0x78, 0xea, 0x0c, 0x5f, 0x35, 0x1f, 0x40, 0x7e, 0xfb, 0xcd, 0xdf,
	0xc9, 0x9f, 0xab, 0xb9, 0x44, 0xf2, 0x61, 0x97, 0x0b, 0xc8, 0x3f, 0x81, 0xb3, 0x03, 0x5d, 0x0d,
	0x14, 0x75, 0x74, 0x1b, 0x5e, 0x91, 0x6f, 0xe6, 0x0e, 0xb5, 0xe5, 0xbc, 0x27, 0xad, 0xff, 0xe5,
	0xfd, 0xba, 0x5d, 0x7b, 0x0f, 0xa0, 0x3e, 0x6c, 0xb3, 0xd2, 0x44, 0xe1, 0xcd, 0x84, 0xa6, 0x40,
	0xbd, 0x35, 0x39, 0xc7, 0x61, 0xdd, 0xe8, 0xd7, 0x12, 0x0c, 0x50, 0xa2, 0xc4, 0x8f, 0xa6, 0x24,
	0xde, 0x7c, 0x69, 0x4a, 0xa2, 0x0e, 0x29, 0x25, 0xab, 0xf0, 0xde, 0x50, 0x5b, 0x3b, 0x7b, 0xe2,
	0x1f, 0xf4, 0x74, 0xe1, 0xfd, 0x8b, 0x11, 0x94, 0xa8, 0x2d, 0x58, 0xf2, 0xe5, 0x13, 0x25, 0x65,
	0x39, 0x93, 0x94, 0xf3, 0x88, 0x0a, 0xa7, 0xb6, 0x0e, 0xcb, 0xdb, 0x3e, 0x76, 0x39, 0x6e, 0xf5,
	0xb2, 0x0b, 0x5d, 0x87, 0xc5, 0x98, 0x5d, 0x91, 0xda, 0xe8, 0x16, 0x2c, 0xb5, 0x09, 0x75, 0xda,
	0xa2, 0x52, 0x94, 0xcf, 0xd4, 0x1d, 0x42, 0x70, 0xd2, 0xc6, 0x02, 0x57, 0x26, 0xaa, 0x60, 0xfe,
	0xaa, 0x25, 0xaf, 0x17, 0x3f, 0x97, 0xe1, 0x7f, 0xb2, 0x05, 0x3a, 0x02, 0xb0, 0x14, 0xe6, 0x06,
	0x7a, 0x9e, 0x9d, 0x61, 0x5f, 0xa8, 0x69, 0xab, 0xa3, 0x03, 0x84, 0xa6, 0xd5, 0x9e, 0xbe, 0xfb,
	0xf2, 0xe3, 0x63, 0xf1, 0x31, 0x5a, 0x32, 0x15, 0x92, 0x99, 0x4e, 0xd6, 0x61, 0x61, 0x8d, 0x7e,
	0x03, 0x38, 0x3d, 0x20, 0xc1, 0xd0, 0xcb, 0x51, 0x9c, 0x1f, 0x16, 0x96, 0xda, 0xab, 0x31, 0xa1,
	0x29, 0xc5, 0x1b, 0x52, 0xf1, 0x1a, 0xaa, 0x67, 0x52, 0x7c, 0xee, 0x73, 0xd9, 0x3d, 0x8c, 0xf2,
	0x2c, 0x61, 0x40, 0x9c, 0x82, 0xf9, 0x0c, 0x48, 0x06, 0x6e, 0x3e, 0x03, 0x52, 0xd1, 0x9c, 0xdf,
	0x00, 0xd1, 0x8d, 0x0d, 0xf8, 0x09, 0xe0, 0x54, 0xea, 0xbb, 0x44, 0x1b, 0xf9, 0x27, 0x16, 0x05,
	0x9d, 0xb6, 0x39, 0x16, 0x2c, 0x25, 0xfd, 0x85, 0x94, 0x5e, 0x47, 0xab, 0x39, 0x67, 0x1f, 0x24,
	0x84, 0xab, 0xf4, 0xcb, 0x27, 0xbc, 0x3f, 0xe1, 0xf3, 0x09, 0x4f, 0x04, 0x7e, 0x7e, 0xe1, 0x6a,
	0xe6, 0x01, 0xfa, 0x05, 0xe0, 0xb5, 0xbe, 0xfc, 0x45, 0x5b, 0xe3, 0x99, 0xd0, 0xd9, 0x61, 0xa0,
	0x35, 0xc6, 0x88, 0xa8, 0x0c, 0x58, 0x93, 0x06, 0xac, 0xa0, 0x67, 0x99, 0x0c, 0x08, 0x8f, 0xa4,
	0xdd, 0xc3, 0x9d, 0xf0, 0x40, 0xa8, 0x5b, 0x47, 0x27, 0x3a, 0x38, 0x3e, 0xd1, 0xc1, 0xf7, 0x13,
	0x1d, 0x7c, 0x38, 0xd5, 0x0b, 0xc7, 0xa7, 0x7a, 0xe1, 0xeb, 0xa9, 0x5e, 0x78, 0xbb, 0xec, 0x50,
	0xd1, 0xee, 0x34, 0x8d, 0x16, 0xdb, 0x8f, 0x3a, 0x3c, 0x62, 0xbe, 0x13, 0x77, 0xeb, 0x0e, 0x40,
	0x17, 0x81, 0x47, 0x78, 0xb3, 0x24, 0xff, 0xb5, 0x2e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xaf,
	0x0a, 0x7d, 0x9b, 0xc0, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	RegisteredKVQueries(ctx context.Context, in *QueryRegisteredKVQueriesRequest, opts ...grpc.CallOption) (*QueryRegisteredKVQueriesResponse, error)
	RegisteredTXQueries(ctx context.Context, in *QueryRegisteredTXQueriesRequest, opts ...grpc.CallOption) (*QueryRegisteredTXQueriesResponse, error)
	RegisteredKVQuery(ctx context.Context, in *QueryRegisteredKVQueryRequest, opts ...grpc.CallOption) (*QueryRegisteredKVQueryResponse, error)
	RegisteredTXQuery(ctx context.Context, in *QueryRegisteredTXQueryRequest, opts ...grpc.CallOption) (*QueryRegisteredTXQueryResponse, error)
	KVQueryResult(ctx context.Context, in *QueryRegisteredKVQueryResultRequest, opts ...grpc.CallOption) (*QueryRegisteredKVQueryResultResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainadapter.interchainqueries.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredKVQueries(ctx context.Context, in *QueryRegisteredKVQueriesRequest, opts ...grpc.CallOption) (*QueryRegisteredKVQueriesResponse, error) {
	out := new(QueryRegisteredKVQueriesResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainadapter.interchainqueries.Query/RegisteredKVQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredTXQueries(ctx context.Context, in *QueryRegisteredTXQueriesRequest, opts ...grpc.CallOption) (*QueryRegisteredTXQueriesResponse, error) {
	out := new(QueryRegisteredTXQueriesResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainadapter.interchainqueries.Query/RegisteredTXQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredKVQuery(ctx context.Context, in *QueryRegisteredKVQueryRequest, opts ...grpc.CallOption) (*QueryRegisteredKVQueryResponse, error) {
	out := new(QueryRegisteredKVQueryResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainadapter.interchainqueries.Query/RegisteredKVQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredTXQuery(ctx context.Context, in *QueryRegisteredTXQueryRequest, opts ...grpc.CallOption) (*QueryRegisteredTXQueryResponse, error) {
	out := new(QueryRegisteredTXQueryResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainadapter.interchainqueries.Query/RegisteredTXQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KVQueryResult(ctx context.Context, in *QueryRegisteredKVQueryResultRequest, opts ...grpc.CallOption) (*QueryRegisteredKVQueryResultResponse, error) {
	out := new(QueryRegisteredKVQueryResultResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainadapter.interchainqueries.Query/KVQueryResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	RegisteredKVQueries(context.Context, *QueryRegisteredKVQueriesRequest) (*QueryRegisteredKVQueriesResponse, error)
	RegisteredTXQueries(context.Context, *QueryRegisteredTXQueriesRequest) (*QueryRegisteredTXQueriesResponse, error)
	RegisteredKVQuery(context.Context, *QueryRegisteredKVQueryRequest) (*QueryRegisteredKVQueryResponse, error)
	RegisteredTXQuery(context.Context, *QueryRegisteredTXQueryRequest) (*QueryRegisteredTXQueryResponse, error)
	KVQueryResult(context.Context, *QueryRegisteredKVQueryResultRequest) (*QueryRegisteredKVQueryResultResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RegisteredKVQueries(ctx context.Context, req *QueryRegisteredKVQueriesRequest) (*QueryRegisteredKVQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredKVQueries not implemented")
}
func (*UnimplementedQueryServer) RegisteredTXQueries(ctx context.Context, req *QueryRegisteredTXQueriesRequest) (*QueryRegisteredTXQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredTXQueries not implemented")
}
func (*UnimplementedQueryServer) RegisteredKVQuery(ctx context.Context, req *QueryRegisteredKVQueryRequest) (*QueryRegisteredKVQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredKVQuery not implemented")
}
func (*UnimplementedQueryServer) RegisteredTXQuery(ctx context.Context, req *QueryRegisteredTXQueryRequest) (*QueryRegisteredTXQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredTXQuery not implemented")
}
func (*UnimplementedQueryServer) KVQueryResult(ctx context.Context, req *QueryRegisteredKVQueryResultRequest) (*QueryRegisteredKVQueryResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVQueryResult not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainadapter.interchainqueries.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredKVQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredKVQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredKVQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainadapter.interchainqueries.Query/RegisteredKVQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredKVQueries(ctx, req.(*QueryRegisteredKVQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredTXQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredTXQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredTXQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainadapter.interchainqueries.Query/RegisteredTXQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredTXQueries(ctx, req.(*QueryRegisteredTXQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredKVQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredKVQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredKVQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainadapter.interchainqueries.Query/RegisteredKVQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredKVQuery(ctx, req.(*QueryRegisteredKVQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredTXQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredTXQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredTXQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainadapter.interchainqueries.Query/RegisteredTXQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredTXQuery(ctx, req.(*QueryRegisteredTXQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KVQueryResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredKVQueryResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KVQueryResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainadapter.interchainqueries.Query/KVQueryResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KVQueryResult(ctx, req.(*QueryRegisteredKVQueryResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neutron.interchainadapter.interchainqueries.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RegisteredKVQueries",
			Handler:    _Query_RegisteredKVQueries_Handler,
		},
		{
			MethodName: "RegisteredTXQueries",
			Handler:    _Query_RegisteredTXQueries_Handler,
		},
		{
			MethodName: "RegisteredKVQuery",
			Handler:    _Query_RegisteredKVQuery_Handler,
		},
		{
			MethodName: "RegisteredTXQuery",
			Handler:    _Query_RegisteredTXQuery_Handler,
		},
		{
			MethodName: "KVQueryResult",
			Handler:    _Query_KVQueryResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interchainqueries/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredKVQueriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredKVQueriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredKVQueriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredKVQueriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredKVQueriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredKVQueriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegisteredQueries) > 0 {
		for iNdEx := len(m.RegisteredQueries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredQueries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredTXQueriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredTXQueriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredTXQueriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredTXQueriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredTXQueriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredTXQueriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegisteredQueries) > 0 {
		for iNdEx := len(m.RegisteredQueries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredQueries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredKVQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredKVQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredKVQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredKVQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredKVQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredKVQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegisteredQuery != nil {
		{
			size, err := m.RegisteredQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredTXQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredTXQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredTXQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredTXQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredTXQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredTXQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegisteredQuery != nil {
		{
			size, err := m.RegisteredQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredKVQueryResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredKVQueryResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredKVQueryResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredKVQueryResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredKVQueryResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredKVQueryResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRegisteredKVQueriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredKVQueriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredQueries) > 0 {
		for _, e := range m.RegisteredQueries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredTXQueriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredTXQueriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredQueries) > 0 {
		for _, e := range m.RegisteredQueries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredKVQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovQuery(uint64(m.QueryId))
	}
	return n
}

func (m *QueryRegisteredKVQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisteredQuery != nil {
		l = m.RegisteredQuery.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredTXQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovQuery(uint64(m.QueryId))
	}
	return n
}

func (m *QueryRegisteredTXQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisteredQuery != nil {
		l = m.RegisteredQuery.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredKVQueryResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovQuery(uint64(m.QueryId))
	}
	return n
}

func (m *QueryRegisteredKVQueryResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredKVQueriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredKVQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredKVQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredKVQueriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredKVQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredKVQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredQueries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredQueries = append(m.RegisteredQueries, RegisteredKVQuery{})
			if err := m.RegisteredQueries[len(m.RegisteredQueries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredTXQueriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredTXQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredTXQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredTXQueriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredTXQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredTXQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredQueries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredQueries = append(m.RegisteredQueries, RegisteredTXQuery{})
			if err := m.RegisteredQueries[len(m.RegisteredQueries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredKVQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredKVQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisteredQuery == nil {
				m.RegisteredQuery = &RegisteredKVQuery{}
			}
			if err := m.RegisteredQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredTXQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredTXQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredTXQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredTXQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredTXQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredTXQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisteredQuery == nil {
				m.RegisteredQuery = &RegisteredTXQuery{}
			}
			if err := m.RegisteredQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredKVQueryResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredKVQueryResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredKVQueryResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
