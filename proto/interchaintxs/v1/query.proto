syntax = "proto3";
package neutron.interchainadapter.interchaintxs;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "interchaintxs/v1/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/neutron-org/neutron/x/interchaintxs/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get =
        "/neutron/interchaintxs/interchaintxs/params";
  }
  rpc InterchainAccountAddress(QueryInterchainAccountAddressRequest) returns (QueryInterchainAccountAddressResponse) {}
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// this line is used by starport scaffolding # 3
message QueryInterchainAccountAddressRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // Owner address is the owner of the interchain account on the controller chain
  string owner_address = 1;
  string connection_id = 2;
}

// Query response for an interchain account address
message QueryInterchainAccountAddressResponse {
  // The corresponding interchain account address on the host chain
  string interchain_account_address = 1;
}