syntax = "proto3";
package neutron.interchainadapter.interchainqueries;

import "tendermint/crypto/proof.proto";
import "tendermint/abci/types.proto";
import "google/protobuf/any.proto";
import "interchainqueries/genesis.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/neutron-org/neutron/x/interchainqueries/types";

// Msg defines the Msg service.
service Msg {
  rpc RegisterInterchainKVQuery(MsgRegisterInterchainKVQuery)
      returns (MsgRegisterInterchainQueryResponse);
  rpc SubmitKVQueryResult(MsgSubmitKVQueryResult)
      returns (MsgSubmitQueryResultResponse);

  rpc RegisterInterchainTXQuery(MsgRegisterInterchainTXQuery)
      returns (MsgRegisterInterchainQueryResponse);
  rpc SubmitTXQueryResult(MsgSubmitTXQueryResult)
      returns (MsgSubmitQueryResultResponse);

  // this line is used by starport scaffolding # proto/tx/rpc
}

// this line is used by starport scaffolding # proto/tx/message

message MsgRegisterInterchainKVQuery {
  // is used to define KV-storage keys for which we want to get values from remote chain
  repeated KVKey keys = 1;

  // is used to identify the chain of interest
  string zone_id = 2;

  // is IBC connection ID for getting ConsensusState to verify proofs
  string connection_id = 3;

  // is used to say how often the query must be updated
  uint64 update_period = 4;

  // is the signer of the message
  string sender = 5;
}

message MsgRegisterInterchainTXQuery {
  // is used to define a filter for transaction search ICQ
  string transactions_filter = 1;

  // is used to identify the chain of interest
  string zone_id = 2;

  // is IBC connection ID for getting ConsensusState to verify proofs
  string connection_id = 3;

  // is the signer of the message
  string sender = 4;
}

message MsgRegisterInterchainQueryResponse { uint64 id = 1; }

message MsgSubmitTXQueryResult {
  uint64 query_id = 1;
  string sender = 2;

  // is the IBC client ID for an IBC connection between Neutron chain and target chain (where the result was obtained from)
  string client_id = 3;
  Block block = 4;
}

message MsgSubmitKVQueryResult {
  uint64 query_id = 1;
  string sender = 2;

  // is the IBC client ID for an IBC connection between Neutron chain and target chain (where the result was obtained from)
  string client_id = 3;
  QueryResult result = 4;
}

message QueryResult {
  repeated StorageValue kv_results = 1;
  uint64 height = 2;
  uint64 revision = 3;
  bool allow_kv_callbacks = 4;
}

message StorageValue {
  // is the substore name (acc, staking, etc.)
  string storage_prefix = 1;

  // is the key in IAVL store
  bytes key = 2;

  // is the value in IAVL store
  bytes value = 3;

  // is the Merkle Proof which proves existence of key-value pair in IAVL storage
  tendermint.crypto.ProofOps Proof = 4;
}

message Block {
  // We need to know block X+1 to verify response of transaction for block X
  // since LastResultsHash is root hash of all results from the txs from the previous block
  google.protobuf.Any next_block_header = 1;

  // We need to know block X to verify inclusion of transaction for block X
  google.protobuf.Any header = 2;

  TxValue tx = 3;
}

message TxValue {
  tendermint.abci.ResponseDeliverTx response = 1;

  // is the Merkle Proof which proves existence of response in block with height next_block_header.Height
  tendermint.crypto.Proof delivery_proof = 2;

  // is the Merkle Proof which proves existence of data in block with height header.Height
  tendermint.crypto.Proof inclusion_proof = 3;

  // is body of the transaction
  bytes data = 4;
}

message MsgSubmitQueryResultResponse {

}

