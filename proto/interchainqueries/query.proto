syntax = "proto3";
package neutron_org.interchainadapter.interchainqueries;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "interchainqueries/params.proto";
import "interchainqueries/genesis.proto";
import "interchainqueries/tx.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/neutron-org/gaia-wasm-zone/x/interchainqueries/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get =
        "/neutron_org/interchainqueries/interchainqueries/params";
  }

  rpc RegisteredQueries(QueryRegisteredQueriesRequest)
      returns (QueryRegisteredQueriesResponse) {
    option (google.api.http).get =
        "/neutron_org/interchainqueries/interchainqueries/registered_queries";
  }

  rpc RegisteredQuery(QueryRegisteredQueryRequest)
      returns (QueryRegisteredQueryResponse) {
    option (google.api.http).get =
        "/neutron_org/interchainqueries/interchainqueries/registered_query";
  }

  rpc QueryResult(QueryRegisteredQueryResultRequest) returns (QueryRegisteredQueryResultResponse) {
    option (google.api.http).get = "/neutron_org/interchainqueries/interchainqueries/query_result";
  }

  rpc QueryTransactions(QuerySubmittedTransactionsRequest) returns (QuerySubmittedTransactionsResponse) {
    option (google.api.http).get = "/neutron_org/interchainqueries/interchainqueries/query_transactions";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryRegisteredQueriesRequest {}

message QueryRegisteredQueriesResponse {
  repeated RegisteredQuery registered_queries = 1
  [ (gogoproto.nullable) = false ];
}

message QueryRegisteredQueryRequest {
  uint64 query_id = 1;
}

message QueryRegisteredQueryResponse {
  RegisteredQuery registered_query = 1;
}

message QueryRegisteredQueryResultRequest {
  uint64 query_id = 1;
}

message QueryRegisteredQueryResultResponse {
  QueryResult result = 1;
}

message QuerySubmittedTransactionsRequest {
  uint64 query_id = 1;
  uint64 start = 2;
  uint64 end = 3;
}

message QuerySubmittedTransactionsResponse {
  repeated Transaction transactions = 1;
}

message Transaction {
  uint64 id = 1;
  uint64 height = 2;
  bytes data = 3;
}

// this line is used by starport scaffolding # 3
